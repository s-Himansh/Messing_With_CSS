/* removing any extra margins and padding */
/* by default there is 8px margin to the body */
/* using the universal selector */
*{
    margin: 0px;
    padding: 0px;
    font-family: calibri;
    font-weight: 600;
}


.one{
    height: 200px;
    width: 200px;
    background-color: beige;
    font-size: 2em;
    padding: 20px;
    box-sizing: border-box;
}

/* anything we create is wrapped inside a box internally and by default */


.parent-container{
    height: 400px;
    width: 100%;
    background-color: rgb(37, 37, 37);
}

.parent-flex{
    height: 400px;
    width: 100%;
    background-color: rgb(37, 37, 37);
    display: flex;
    flex-direction: row;
    justify-content: space-evenly; 
    align-items: center;
    flex-wrap: wrap;
}

/** justify content always works on main-axis (flex-direction) and align items always works on cross axis (!flex direction) */

.child-container{
    height: 200px;
    width: 20%;
    background-color: tomato;
    border-radius: 10px;
    display: inline-block;
    margin-left: 4%;
    margin-top: 100px;
}


.child{
    height: 200px;
    width: 20%;
    border-radius: 10px;
}

.red{
    background-color: red;
    transition: 1s;
}

.yellow{
    background-color: yellow;
}

.green{
    background-color: green;
}

.blue{
    background-color: rgb(70, 70, 243);
}


/* using some pseudo classes */
.red:hover{
    background-color: white;
}

.red:active{
    background-color: rgb(21, 21, 21);
}



/* messing with positions */

.first-parent{
    width: 700px;
    height: 700px;
    border: 4px solid black;
    margin: 50px 200px;
    position: relative;
}

.second-parent{
    width: 300px;
    height: 500px;
    border: 4px solid black;
    margin: 50px 200px;
}

.container-blue{
    width: 100px;
    height: 100px;
    background-color: blue;
    position: absolute;
    top: 0px;
    left: 0px;
}

.container-red{
    width: 100px;
    height: 100px;
    background-color: red;
    /* position: absolute;
    top: 0px;
    left: 0px; */
    /* position: fixed;
    top: 0px;
    left: 0px; */
}

.container-green{
    width: 100px;
    height: 100px;
    background-color: green;
}


/* IMPORTANT POINTS REGARDING POSITIONS */
/* 
    1. if the position is relative, we can change it relatively acc. to our need wrt your original position
    2. if the position is absolute,  it'll be aligned to it's nearest ancestor having position else the view port though
        the element will still be scrollable 
    3. if the position is fixed, it'll be stick to the view port and will not be able to disappear even after scroll
*/


/* creating a simple navbar */

.header{
    width: 100%;
    height: 80px;
    background-color: rgb(37, 37, 37);
    display: flex;
    justify-content: space-around;
    color: white;
}

.logo{
    /* background-color: yellow; */
    width: 20%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 32px;
    font-family: segoe UI;
}

.navigators{
    /* background-color: yellow; */
    width: 20%;
}

.nav-list{
    display: flex;
    justify-content: space-around;
    align-items: center;
    height: 100%;
    font-size: 17px;
}


/* creating a section after div */

.section{
    height: auto;
    background-color: gray;
    padding: 50px;
    display: flex;
    /* justify-content: space-around; */
    flex-wrap: wrap;
    column-gap: calc(20% / 3);
    row-gap: 50px;
}

.section-box{
    width:20%;
    height: 250px;
    background-color: red;
    border-radius: 20px;
}
